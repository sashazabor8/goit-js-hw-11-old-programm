{"mappings":";;AAqCA,MAAMA,0BAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGlDK,gBAAmBC,IACrB,MAAMC,GALyBP,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADtB,IAACA,EAAKC,EAMpC,OAAO,IAAIO,SAAS,CAACC,EAAQC,KACzBC,YAAW,KACYT,KAAKE,SAAW,GAGnCK,EAAQH,EAAYM,GAAIL,GAExBG,EAAOJ,EAAYM,GAAE,GAElBL,EAAA,GACX,EAIEM,WAAa,CAACD,EAAIE,KACpBC,QAAQC,IAAI,eAAeJ,kBAAmBE,MAAQ,EAGpDG,SAAWL,IACbG,QAAQG,KAAK,gCAAgCN,6BAA6B,EAI9EP,gBAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC7BC,KAAKP,YACLQ,MAAMJ,UAEXZ,gBAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC7BC,KAAKP,YACLQ,MAAMJ,UAEXZ,gBAAgB,CAAEO,GAAI,GAAIO,OAAQ,KAC7BC,KAAKP,YACLQ,MAAMJ,UAEXZ,gBAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC7BC,KAAKP,YACLQ,MAAMJ","sources":["src/js/task-3.js"],"sourcesContent":["//* Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, \n//* а принимала всего один параметр transaction и возвращала промис.\n\n//! неправильный вариант \n// const randomIntegerFromInterval = (min, max) => {\n//     return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//     const delay = randomIntegerFromInterval(200, 500);\n\n//     setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//     onSuccess(transaction.id, delay);\n//     } else {\n//     onError(transaction.id);\n//     }\n//     }, delay);\n// };\n\n// const logSuccess = (id, time) => {\n//     console.log(`Transaction ${id} processed in ${time}ms`);\n// };\n\n// const logError = id => {\n//     console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n//! должно так \n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise ((resolve,reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n        \n            if (canProcess) {\n            resolve(transaction.id, delay)\n            } else {\n            reject(transaction.id)\n            }\n            }, delay);\n    })\n    \n};\n\nconst logSuccess = (id, time) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n\nmakeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","resolve","reject","setTimeout","id","logSuccess","time","console","log","logError","warn","amount","then","catch"],"version":3,"file":"task-3.272837d5.js.map"}